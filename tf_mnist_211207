# -*- coding: utf-8 -*-
"""
Created on Tue Dec  7 14:04:47 2021

decoding_handwriting, tensorflow exercise

@author: JM_SEOL
"""

import tensorflow as tf
import matplotlib.pyplot as plt


(x_tr, y_tr), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
plt.imshow(x_tr[0], cmap = plt.cm.gray_r,interpolation='nearest')

tf.random.set_seed(1234)
#%% Logistic Regression
# data preparation
(x_tr, x_test) = (x_tr/255, x_test/255)
x_tr=x_tr.reshape(-1,28*28)
x_test=x_test.reshape(-1,28*28)

y_tr = tf.keras.utils.to_categorical(y_tr,10)
y_test = tf.keras.utils.to_categorical(y_test,10)

# model construction
mdl = tf.keras.Sequential()
mdl.add(tf.keras.layers.Dense(units=10,input_dim=784,activation='softmax'))
mdl.compile(loss='categorical_crossentropy', optimizer=tf.optimizers.Adam(lr=0.01), metrics=['accuracy'])
mdl.summary()

# model fit
mdl.fit(x_tr,y_tr,batch_size=100,epochs=20,validation_data = (x_test,y_test))
test_loss,test_acc = mdl.evaluate(x_test,y_test)


#%% Neural Network

# data preparation: use same data as LR's

# model construction
mdl2 = tf.keras.Sequential()
mdl2.add(tf.keras.layers.Dense(units=256, input_dim=784, activation = 'relu'))
mdl2.add(tf.keras.layers.Dense(units=128,activation = 'relu'))
mdl2.add(tf.keras.layers.Dense(units=64,activation='relu'))
mdl2.add(tf.keras.layers.Dense(units=32,activation='relu'))
mdl2.add(tf.keras.layers.Dense(units=10,activation='softmax'))
mdl2.compile(loss='categorical_crossentropy', optimizer=tf.optimizers.Adam(lr=0.001),metrics=['accuracy'])
mdl2.summary()

# model fit
mdl2.fit(x_tr,y_tr,batch_size=100,epochs=10,validation_data = (x_test,y_test))


#%% Convolution Neural Network

# data preparation
(x_tr, y_tr), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
(x_tr, x_test) = (x_tr/255, x_test/255)
x_tr=x_tr.reshape(-1,28,28,1)
x_test=x_test.reshape(-1,28,28,1)

y_tr = tf.keras.utils.to_categorical(y_tr,10)
y_test = tf.keras.utils.to_categorical(y_test,10)

# model construction
mdl3 = tf.keras.Sequential()
mdl3.add(tf.keras.layers.Conv2D(kernel_size=(3,3),filters=64,input_shape=(28,28,1),padding='same',activation='relu'))
mdl3.add(tf.keras.layers.Conv2D(kernel_size=(3,3),filters=64,padding='same',activation='relu'))
mdl3.add(tf.keras.layers.MaxPool2D(pool_size=(2,2)))

mdl3.add(tf.keras.layers.Conv2D(kernel_size=(3,3),filters=128,padding='same',activation='relu'))
mdl3.add(tf.keras.layers.Conv2D(kernel_size=(3,3),filters=256,padding='valid',activation='relu'))
mdl3.add(tf.keras.layers.MaxPool2D(pool_size=(2,2)))

mdl3.add(tf.keras.layers.Flatten())
mdl3.add(tf.keras.layers.Dense(units=512,activation='relu'))
mdl3.add(tf.keras.layers.Dropout(0.5))
mdl3.add(tf.keras.layers.Dense(units=256,activation='relu'))
mdl3.add(tf.keras.layers.Dropout(0.5))
mdl3.add(tf.keras.layers.Dense(units=10,activation='softmax'))

mdl3.compile(loss='categorical_crossentropy', optimizer=tf.optimizers.Adam(lr=0.001),metrics=['accuracy'])
mdl3.summary()

# model fit

mdl3.fit(x_tr,y_tr,batch_size=100,epochs=10,validation_data = (x_test,y_test))
